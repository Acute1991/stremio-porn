{"version":3,"sources":["../../src/adapters/BaseAdapter.js"],"names":["BaseAdapter","constructor","httpClient","_normalizeItem","item","_normalizeStream","stream","name","_paginate","request","itemsPerPage","ITEMS_PER_PAGE","skip","limit","firstPage","Math","ceil","pageCount","pages","i","length","push","skipOnFirstPage","_validateRequest","type","SUPPORTED_TYPES","Error","query","includes","_find","pagination","Infinity","requests","map","page","_findByPage","results","Promise","all","concat","filter","slice","find","getItem","id","result","_getItem","getStreams","_getStreams"],"mappings":"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","sourcesContent":["// Contains some common methods as well as public wrappers\n// that prepare requests, redirect them to private methods\n// and normalize results\nclass BaseAdapter {\n  static SUPPORTED_TYPES = []\n\n  constructor(httpClient) {\n    this.httpClient = httpClient\n  }\n\n  _normalizeItem(item) {\n    return item\n  }\n\n  _normalizeStream(stream) {\n    if (stream.name) {\n      return stream\n    } else {\n      return { ...stream, name: this.constructor.name }\n    }\n  }\n\n  _paginate(request, itemsPerPage = this.constructor.ITEMS_PER_PAGE) {\n    let {\n      skip = 0,\n      limit = itemsPerPage,\n    } = request\n    let firstPage = Math.ceil((skip + 0.1) / itemsPerPage) || 1\n    let pageCount = Math.ceil(limit / itemsPerPage)\n    let pages = []\n\n    for (let i = firstPage; pages.length < pageCount; i++) {\n      pages.push(i)\n    }\n\n    return {\n      pages, skip, limit,\n      skipOnFirstPage: skip % itemsPerPage,\n    }\n  }\n\n  _validateRequest(request) {\n    let type = typeof request\n    let { SUPPORTED_TYPES } = this.constructor\n\n    if (type !== 'object') {\n      throw new Error(`A request must be an object, ${type} given`)\n    }\n\n    if (!request.query) {\n      throw new Error('Request query must not be empty')\n    }\n\n    if (!SUPPORTED_TYPES.includes(request.query.type)) {\n      throw new Error(`Content type ${request.query.type} is not supported`)\n    }\n  }\n\n  async _find(query, pagination) {\n    let {\n      pages,\n      limit = Infinity,\n      skipOnFirstPage = 0,\n    } = pagination\n\n    let requests = pages.map((page) => {\n      return this._findByPage(query, page)\n    })\n\n    let results = await Promise.all(requests)\n    results = [].concat(...results).filter((item) => item)\n    return results.slice(skipOnFirstPage, skipOnFirstPage + limit)\n  }\n\n  async find(request) {\n    this._validateRequest(request)\n\n    let pagination = this._paginate(request)\n    let results = await this._find(request.query, pagination)\n\n    if (results) {\n      return results.map((item) => this._normalizeItem(item))\n    } else {\n      return []\n    }\n  }\n\n  async getItem(request) {\n    this._validateRequest(request)\n\n    let { type, id } = request.query\n    let result = await this._getItem(type, id)\n    return result ? [this._normalizeItem(result)] : []\n  }\n\n  async getStreams(request) {\n    this._validateRequest(request)\n\n    let { type, id } = request.query\n    let results = await this._getStreams(type, id)\n\n    if (results) {\n      return results.map((stream) => this._normalizeStream(stream))\n    } else {\n      return []\n    }\n  }\n}\n\n\nexport default BaseAdapter\n"],"file":"BaseAdapter.js"}