{"version":3,"sources":["../../src/adapters/HubTrafficAdapter.js"],"names":["HubTrafficAdapter","BaseAdapter","_normalizeItem","item","video","TAGS_TO_SKIP","constructor","tags","Object","values","map","tag","tag_name","filter","includes","toLowerCase","type","id","video_id","name","title","trim","genre","banner","thumb","poster","posterShape","year","publish_date","split","website","url","description","runtime","duration","popularity","Number","views","isFree","_normalizeStream","stream","quality","availability","_makeMethodUrl","Error","_makeEmbedUrl","_extractStreamsFromEmbed","_requestApi","method","params","options","json","URL","keys","forEach","undefined","searchParams","set","body","httpClient","request","code","err","message","_findByPage","query","page","newQuery","search","period","ordering","thumbsize","videos","result","length","ITEMS_PER_PAGE","_getItem","VIDEO_ID_PARAMETER","_getStreams","streams"],"mappings":"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","sourcesContent":["import { URL } from 'url'\nimport BaseAdapter from './BaseAdapter'\n\n\n// https://www.hubtraffic.com/\nclass HubTrafficAdapter extends BaseAdapter {\n  static SUPPORTED_TYPES = ['movie']\n  static TAGS_TO_SKIP = []\n  static VIDEO_ID_PARAMETER = 'video_id'\n\n  _normalizeItem(item) {\n    let video = item.video || item\n    let { TAGS_TO_SKIP } = this.constructor\n    let tags = video.tags && Object.values(video.tags)\n      .map((tag) => {\n        return (typeof tag === 'string') ? tag : tag.tag_name\n      })\n      .filter((tag) => !TAGS_TO_SKIP.includes(tag.toLowerCase()))\n\n    return super._normalizeItem({\n      type: 'movie',\n      id: video.video_id || video.id,\n      name: video.title.trim(),\n      genre: tags,\n      banner: video.thumb,\n      poster: video.thumb,\n      posterShape: 'landscape',\n      year: video.publish_date && video.publish_date.split('-')[0],\n      website: video.url,\n      description: video.url,\n      runtime: video.duration,\n      popularity: Number(video.views),\n      isFree: 1,\n    })\n  }\n\n  _normalizeStream(stream) {\n    let title =\n      (stream.title && stream.title.trim()) ||\n      (stream.quality && stream.quality.trim()) ||\n      'SD'\n\n    return super._normalizeStream({\n      ...stream,\n      title,\n      availability: 1,\n      isFree: 1,\n    })\n  }\n\n  _makeMethodUrl() {\n    throw new Error('Not implemented')\n  }\n\n  _makeEmbedUrl() {\n    throw new Error('Not implemented')\n  }\n\n  _extractStreamsFromEmbed() {\n    throw new Error('Not implemented')\n  }\n\n  async _requestApi(method, params) {\n    let options = {\n      json: true,\n    }\n    let url = this._makeMethodUrl(method)\n\n    if (params) {\n      url = new URL(url)\n      Object.keys(params).forEach((name) => {\n        if (params[name] !== undefined) {\n          url.searchParams.set(name, params[name])\n        }\n      })\n    }\n\n    let { body } = await this.httpClient.request(url, options)\n\n    if (body.code) {\n      let err = new Error(body.message)\n      err.code = Number(body.code)\n      throw err\n    }\n\n    return body\n  }\n\n  async _findByPage(query, page) {\n    let newQuery = {\n      'tags[]': query.genre,\n      search: query.search,\n      period: 'weekly',\n      ordering: 'mostviewed',\n      thumbsize: 'medium',\n      page,\n    }\n    let videos = []\n\n    try {\n      let result = await this._requestApi('searchVideos', newQuery)\n      videos = result.videos || result.video || []\n    } catch (err) {\n      // eslint-disable-next-line eqeqeq\n      if (err.code != 2001 && err.message !== 'No Videos found!') {\n        throw err\n      }\n    }\n\n    // We retry with the monthly period in case there are too few weekly videos\n    if (page === 1 && videos.length < this.constructor.ITEMS_PER_PAGE) {\n      newQuery.period = 'monthly'\n      let result = await this._requestApi('searchVideos', newQuery)\n      videos = result.videos || result.video\n    }\n\n    return videos\n  }\n\n  async _getItem(type, id) {\n    let query = {\n      [this.constructor.VIDEO_ID_PARAMETER]: id,\n    }\n\n    try {\n      return await this._requestApi('getVideoById', query)\n    } catch (err) {\n      // Ignore the \"No video with this ID.\" error\n      // eslint-disable-next-line eqeqeq\n      if (err.code != 2002) {\n        throw err\n      }\n    }\n  }\n\n  async _getStreams(type, id) {\n    let url = this._makeEmbedUrl(id)\n    let { body } = await this.httpClient.request(url)\n\n    let streams = this._extractStreamsFromEmbed(body)\n    return streams && streams.map((stream) => {\n      stream.id = id\n      return stream\n    })\n  }\n}\n\n\nexport default HubTrafficAdapter\n"],"file":"HubTrafficAdapter.js"}